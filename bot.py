import os
import logging
import sqlite3
import requests
from aiogram import Bot, Dispatcher, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from datetime import datetime
from aiohttp import ClientSession
import secrets

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞
TOKEN = os.getenv("8164381436:AAGfqtB4y9pjlg7rMzPAysMPsqixaUFVvZA")
ADMIN_IDS = list(map(int, os.getenv("ADMIN_IDS", "6790535634,6303872304").split(",")))
SITE_URL = os.getenv("SITE_URL", "https://free-gold-bot-new.onrender.com")
MIN_WITHDRAW = 250
MAX_WITHDRAW = 400
REFERRAL_BONUS = 4
TELEGRAM_CHANNEL = "https://t.me/promolllGoldfreelll"
API_KEY = os.getenv("API_KEY", "secure_api_key_123")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token=TOKEN)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s"
)
logger = logging.getLogger(__name__)

async def wake_up_server():
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–±—É–∂–¥–µ–Ω–∏—è —Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞ Render"""
    try:
        async with ClientSession() as session:
            async with session.get(f"{SITE_URL}/wake-up") as response:
                if response.status == 200:
                    logger.info("–°–µ—Ä–≤–µ—Ä —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–±—É–∂–¥–µ–Ω")
                else:
                    logger.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–±—É–¥–∏—Ç—å —Å–µ—Ä–≤–µ—Ä")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–±—É–∂–¥–µ–Ω–∏–∏ —Å–µ—Ä–≤–µ—Ä–∞: {e}")

def init_db():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    conn = sqlite3.connect('bot.db')
    cursor = conn.cursor()
    
    # –¢–∞–±–ª–∏—Ü–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    cursor.execute('''CREATE TABLE IF NOT EXISTS users
                     (user_id INTEGER PRIMARY KEY, 
                      username TEXT,
                      balance INTEGER DEFAULT 0,
                      referrals INTEGER DEFAULT 0,
                      banned BOOLEAN DEFAULT FALSE,
                      reg_date TIMESTAMP,
                      auth_token TEXT)''')
    
    # –¢–∞–±–ª–∏—Ü–∞ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤
    cursor.execute('''CREATE TABLE IF NOT EXISTS promocodes
                     (id INTEGER PRIMARY KEY AUTOINCREMENT,
                      code TEXT UNIQUE,
                      gold INTEGER,
                      max_activations INTEGER,
                      activations_left INTEGER,
                      is_active BOOLEAN DEFAULT TRUE)''')
    
    # –¢–∞–±–ª–∏—Ü–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–π –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤
    cursor.execute('''CREATE TABLE IF NOT EXISTS activations
                     (id INTEGER PRIMARY KEY AUTOINCREMENT,
                      user_id INTEGER,
                      promo_id INTEGER,
                      activated_at TIMESTAMP)''')
    
    # –¢–∞–±–ª–∏—Ü–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
    cursor.execute('''CREATE TABLE IF NOT EXISTS transactions
                     (id INTEGER PRIMARY KEY AUTOINCREMENT,
                      user_id INTEGER,
                      amount INTEGER,
                      status TEXT,
                      avatar_id TEXT,
                      screenshot_id TEXT,
                      created_at TIMESTAMP,
                      completed_at TIMESTAMP,
                      feedback_given BOOLEAN DEFAULT FALSE)''')
    
    # –¢–∞–±–ª–∏—Ü–∞ –æ—Ç–∑—ã–≤–æ–≤
    cursor.execute('''CREATE TABLE IF NOT EXISTS feedbacks
                     (id INTEGER PRIMARY KEY AUTOINCREMENT,
                      user_id INTEGER,
                      transaction_id INTEGER,
                      text TEXT,
                      photo_id TEXT,
                      created_at TIMESTAMP)''')
    
    # –¢–∞–±–ª–∏—Ü–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤
    cursor.execute('''CREATE TABLE IF NOT EXISTS referrals
                     (id INTEGER PRIMARY KEY AUTOINCREMENT,
                      referrer_id INTEGER,
                      referral_id INTEGER UNIQUE,
                      created_at TIMESTAMP)''')
    
    conn.commit()
    conn.close()

init_db()

# –°–æ—Å—Ç–æ—è–Ω–∏—è FSM
class WithdrawState(StatesGroup):
    AMOUNT = State()
    AVATAR = State()
    SCREENSHOT = State()

class PromoCodeState(StatesGroup):
    ENTER_CODE = State()

class AdminState(StatesGroup):
    ADD_PROMO = State()
    BAN_USER = State()
    UNBAN_USER = State()
    SEND_ANNOUNCE = State()

class FeedbackState(StatesGroup):
    TEXT = State()

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
def get_main_menu():
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.row("üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å", "üí∏ –í—ã–≤–µ—Å—Ç–∏ –≥–æ–ª–¥—É")
    keyboard.row("üéÅ –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥", "üìä –ò—Å—Ç–æ—Ä–∏—è –≤—ã–≤–æ–¥–æ–≤")
    keyboard.row("üåê –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç")
    return keyboard

def get_admin_menu():
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.row("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", "üì¢ –†–∞—Å—Å—ã–ª–∫–∞")
    keyboard.row("üî® –ó–∞–±–∞–Ω–∏—Ç—å/–†–∞–∑–±–∞–Ω–∏—Ç—å", "üéÅ –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–º–æ")
    keyboard.row("‚óÄÔ∏è –í –º–µ–Ω—é")
    return keyboard

def get_back_menu():
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.row("‚óÄÔ∏è –ù–∞–∑–∞–¥")
    return keyboard

def get_feedback_keyboard(transaction_id):
    keyboard = types.InlineKeyboardMarkup()
    keyboard.row(
        types.InlineKeyboardButton("üìù –û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤", callback_data=f"leave_feedback_{transaction_id}"),
        types.InlineKeyboardButton("‚ùå –ù–µ —Å–µ–π—á–∞—Å", callback_data=f"no_feedback_{transaction_id}")
    )
    return keyboard

def get_ban_unban_menu():
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.row("üî® –ó–∞–±–∞–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
    keyboard.row("üîì –†–∞–∑–±–∞–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
    keyboard.row("‚óÄÔ∏è –ù–∞–∑–∞–¥")
    return keyboard

# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
async def generate_auth_token(user_id):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–æ–∫–µ–Ω–∞ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –Ω–∞ —Å–∞–π—Ç–µ"""
    token = secrets.token_hex(16)
    conn = sqlite3.connect('bot.db')
    cursor = conn.cursor()
    cursor.execute("UPDATE users SET auth_token = ? WHERE user_id = ?", (token, user_id))
    conn.commit()
    conn.close()
    return token

async def get_user_balance(user_id):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    conn = sqlite3.connect('bot.db')
    cursor = conn.cursor()
    cursor.execute("SELECT balance FROM users WHERE user_id = ?", (user_id,))
    result = cursor.fetchone()
    conn.close()
    return result[0] if result else 0

async def generate_referral_link(user_id):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏"""
    bot_username = (await bot.get_me()).username
    return f"https://t.me/{bot_username}?start=ref{user_id}"

async def sync_with_website(user_id, action, data=None):
    """–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å –≤–µ–±-—Å–∞–π—Ç–æ–º"""
    try:
        conn = sqlite3.connect('bot.db')
        cursor = conn.cursor()
        cursor.execute("SELECT auth_token FROM users WHERE user_id = ?", (user_id,))
        token = cursor.fetchone()[0]
        
        headers = {
            "Authorization": f"Bearer {token}",
            "X-API-KEY": API_KEY
        }
        
        async with ClientSession() as session:
            if action == "login":
                await session.post(
                    f"{SITE_URL}/api/login", 
                    json={"user_id": user_id}, 
                    headers=headers
                )
            elif action == "withdraw":
                await session.post(
                    f"{SITE_URL}/api/transactions", 
                    json=data, 
                    headers=headers
                )
            elif action == "update_balance":
                await session.patch(
                    f"{SITE_URL}/api/users/{user_id}", 
                    json=data, 
                    headers=headers
                )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å —Å–∞–π—Ç–æ–º: {e}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
@dp.message_handler(commands=['start'])
async def cmd_start(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    await wake_up_server()
    
    user_id = message.from_user.id
    username = message.from_user.username
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏
    ref_id = None
    if len(message.text) > 7 and 'ref' in message.text:
        try:
            ref_id = int(message.text.split('ref')[1])
        except (ValueError, IndexError):
            pass
    
    conn = sqlite3.connect('bot.db')
    cursor = conn.cursor()
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–Ω–∞
    cursor.execute("SELECT banned FROM users WHERE user_id = ?", (user_id,))
    user = cursor.fetchone()
    
    if user and user[0]:
        await message.answer("üö´ –í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ")
        conn.close()
        return
    
    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if not user:
        auth_token = await generate_auth_token(user_id)
        cursor.execute(
            "INSERT INTO users (user_id, username, balance, reg_date, auth_token) VALUES (?, ?, ?, ?, ?)",
            (user_id, username, 0, datetime.now(), auth_token)
        )
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–∞
        if ref_id and ref_id != user_id:
            try:
                cursor.execute("SELECT 1 FROM users WHERE user_id = ?", (ref_id,))
                if cursor.fetchone():
                    cursor.execute("SELECT 1 FROM referrals WHERE referral_id = ?", (user_id,))
                    if not cursor.fetchone():
                        cursor.execute(
                            "INSERT INTO referrals (referrer_id, referral_id, created_at) VALUES (?, ?, ?)",
                            (ref_id, user_id, datetime.now())
                        )
                        cursor.execute(
                            "UPDATE users SET referrals = referrals + 1, balance = balance + ? WHERE user_id = ?",
                            (REFERRAL_BONUS, ref_id)
                        )
                        cursor.execute(
                            "UPDATE users SET balance = balance + ? WHERE user_id = ?",
                            (REFERRAL_BONUS, user_id)
                        )
                        
                        try:
                            await bot.send_message(
                                ref_id,
                                f"üéâ –ù–æ–≤—ã–π —Ä–µ—Ñ–µ—Ä–∞–ª! @{username} –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –ø–æ –≤–∞—à–µ–π —Å—Å—ã–ª–∫–µ!\n"
                                f"–í–∞—à –±–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ {REFERRAL_BONUS} –≥–æ–ª–¥—ã"
                            )
                        except Exception as e:
                            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Ä–µ—Ñ–µ—Ä–µ—Ä—É: {e}")
                        
                        try:
                            await bot.send_message(
                                user_id,
                                f"üéâ –í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ!\n"
                                f"–í–∞—à –±–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ {REFERRAL_BONUS} –≥–æ–ª–¥—ã"
                            )
                        except Exception as e:
                            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Ä–µ—Ñ–µ—Ä–∞–ª—É: {e}")
            except sqlite3.IntegrityError:
                pass
    
    conn.commit()
    conn.close()
    
    # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å —Å–∞–π—Ç–æ–º
    await sync_with_website(user_id, "login")
    
    await message.answer(
        f"üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, @{username}!\n\n"
        f"üíé –í–∞—à –±–∞–ª–∞–Ω—Å: {await get_user_balance(user_id)} –≥–æ–ª–¥—ã\n"
        f"üîó –ù–µ –∑–Ω–∞–µ—à—å –≥–¥–µ –Ω–∞–π—Ç–∏ –ø—Ä–æ–º–æ–∫–æ–¥ –¥–ª—è —Ñ–∞—Ä–º–∞ –≥–æ–ª–¥—ã? –ü–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ —Ç–µ–ª–µ–≥—Ä–∞–º –∫–∞–Ω–∞–ª: {TELEGRAM_CHANNEL}\n\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:",
        reply_markup=get_main_menu()
    )

@dp.message_handler(text="‚óÄÔ∏è –í –º–µ–Ω—é")
async def back_to_menu(message: types.Message):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    await message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=get_main_menu())

# –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@dp.message_handler(text="üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å")
async def my_profile(message: types.Message):
    """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_id = message.from_user.id
    conn = sqlite3.connect('bot.db')
    cursor = conn.cursor()
    
    cursor.execute(
        "SELECT balance, referrals FROM users WHERE user_id = ?", 
        (user_id,)
    )
    user_data = cursor.fetchone()
    
    if not user_data:
        await message.answer("‚ùå –ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        conn.close()
        return
    
    balance, referrals = user_data
    
    cursor.execute(
        "SELECT COUNT(*) FROM transactions WHERE user_id = ? AND status = 'completed'",
        (user_id,)
    )
    withdrawals = cursor.fetchone()[0]
    
    conn.close()
    
    keyboard = types.InlineKeyboardMarkup()
    keyboard.add(
        types.InlineKeyboardButton("üîó –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞", callback_data="ref_link"),
        types.InlineKeyboardButton("üì§ –ú–æ–∏ –≤—ã–≤–æ–¥—ã", callback_data="my_withdrawals")
    )
    
    await message.answer(
        f"üë§ –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:\n\n"
        f"üí∞ –ë–∞–ª–∞–Ω—Å: {balance} –≥–æ–ª–¥—ã\n"
        f"üë• –†–µ—Ñ–µ—Ä–∞–ª–æ–≤: {referrals} (+{referrals * REFERRAL_BONUS} –≥–æ–ª–¥—ã)\n"
        f"üì§ –í—ã–≤–æ–¥–æ–≤: {withdrawals}",
        reply_markup=keyboard
    )

@dp.callback_query_handler(lambda c: c.data == "ref_link")
async def show_ref_link(callback_query: types.CallbackQuery):
    """–ü–æ–∫–∞–∑ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏"""
    user_id = callback_query.from_user.id
    link = await generate_referral_link(user_id)
    
    await bot.edit_message_text(
        chat_id=callback_query.message.chat.id,
        message_id=callback_query.message.message_id,
        text=f"üë• –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞:\n\n"
             f"üîó –í–∞—à–∞ —Å—Å—ã–ª–∫–∞: {link}\n\n"
             f"üíé –ó–∞ –∫–∞–∂–¥–æ–≥–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω–æ–≥–æ –¥—Ä—É–≥–∞ –≤—ã –ø–æ–ª—É—á–∞–µ—Ç–µ {REFERRAL_BONUS} –≥–æ–ª–¥—ã!\n"
             f"üí∞ –í–∞—à –¥—Ä—É–≥—É —Ç–æ–∂–µ –ø–æ–ª—É—á–∞–µ—Ç –±–æ–Ω—É—Å –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏!",
        reply_markup=None
    )

@dp.callback_query_handler(lambda c: c.data == "my_withdrawals")
async def show_my_withdrawals(callback_query: types.CallbackQuery):
    """–ü–æ–∫–∞–∑ –∏—Å—Ç–æ—Ä–∏–∏ –≤—ã–≤–æ–¥–æ–≤"""
    user_id = callback_query.from_user.id
    conn = sqlite3.connect('bot.db')
    cursor = conn.cursor()
    
    cursor.execute(
        "SELECT id, amount, status, created_at FROM transactions WHERE user_id = ? ORDER BY created_at DESC LIMIT 10",
        (user_id,)
    )
    transactions = cursor.fetchall()
    conn.close()
    
    if not transactions:
        await bot.answer_callback_query(callback_query.id, "üìä –£ –≤–∞—Å –µ—â–µ –Ω–µ—Ç –≤—ã–≤–æ–¥–æ–≤")
        return
    
    response = "üì§ –í–∞—à–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –≤—ã–≤–æ–¥—ã:\n\n"
    for trans in transactions:
        trans_id, amount, status, created_at = trans
        status_icon = "‚úÖ" if status == "completed" else "üïí" if status == "pending" else "‚ùå"
        response += f"{status_icon} #{trans_id}: {amount} –≥–æ–ª–¥—ã ({status}) - {created_at}\n"
    
    await bot.edit_message_text(
        chat_id=callback_query.message.chat.id,
        message_id=callback_query.message.message_id,
        text=response,
        reply_markup=None
    )

# –ò—Å—Ç–æ—Ä–∏—è –≤—ã–≤–æ–¥–æ–≤
@dp.message_handler(text="üìä –ò—Å—Ç–æ—Ä–∏—è –≤—ã–≤–æ–¥–æ–≤")
async def show_history(message: types.Message):
    """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –≤—ã–≤–æ–¥–æ–≤"""
    user_id = message.from_user.id
    conn = sqlite3.connect('bot.db')
    cursor = conn.cursor()
    
    cursor.execute(
        "SELECT id, amount, status, created_at FROM transactions WHERE user_id = ? ORDER BY created_at DESC LIMIT 10",
        (user_id,)
    )
    transactions = cursor.fetchall()
    
    if not transactions:
        await message.answer("üìä –£ –≤–∞—Å –µ—â–µ –Ω–µ—Ç –≤—ã–≤–æ–¥–æ–≤")
        return
    
    response = "üìä –ü–æ—Å–ª–µ–¥–Ω–∏–µ –≤—ã–≤–æ–¥—ã:\n\n"
    for trans in transactions:
        trans_id, amount, status, created_at = trans
        status_icon = "‚úÖ" if status == "completed" else "üïí" if status == "pending" else "‚ùå"
        response += f"{status_icon} #{trans_id}: {amount} –≥–æ–ª–¥—ã ({status}) - {created_at}\n"
    
    await message.answer(response)

# –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç
@dp.message_handler(text="üåê –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç")
async def personal_account(message: types.Message):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å—Å—ã–ª–∫–∏ –Ω–∞ –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç"""
    user_id = message.from_user.id
    conn = sqlite3.connect('bot.db')
    cursor = conn.cursor()
    
    cursor.execute("SELECT auth_token FROM users WHERE user_id = ?", (user_id,))
    token = cursor.fetchone()[0]
    conn.close()
    
    login_url = f"{SITE_URL}/login?token={token}&user_id={user_id}"
    
    await message.answer(
        f"üîê –í–∞—à –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç:\n\n"
        f"–ü–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ –¥–ª—è –≤—Ö–æ–¥–∞:\n"
        f"{login_url}\n\n"
        f"–í –ª–∏—á–Ω–æ–º –∫–∞–±–∏–Ω–µ—Ç–µ –≤—ã –º–æ–∂–µ—Ç–µ:\n"
        f"- –ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π\n"
        f"- –£–ø—Ä–∞–≤–ª—è—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –∞–∫–∫–∞—É–Ω—Ç–∞\n"
        f"- –ü–æ–ª—É—á–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É",
        reply_markup=types.InlineKeyboardMarkup().add(
            types.InlineKeyboardButton("üì≤ –û—Ç–∫—Ä—ã—Ç—å –∫–∞–±–∏–Ω–µ—Ç", url=login_url)
        )
    )

# –ê–∫—Ç–∏–≤–∞—Ü–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–∞
@dp.message_handler(text="üéÅ –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥")
async def activate_promo_start(message: types.Message):
    """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø—Ä–æ–º–æ–∫–æ–¥–∞"""
    await PromoCodeState.ENTER_CODE.set()
    await message.answer("üîë –í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥:", reply_markup=get_back_menu())

@dp.message_handler(state=PromoCodeState.ENTER_CODE)
async def process_promo_code(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ –ø—Ä–æ–º–æ–∫–æ–¥–∞"""
    if message.text == "‚óÄÔ∏è –ù–∞–∑–∞–¥":
        await state.finish()
        await message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=get_main_menu())
        return
        
    promo_code = message.text.upper()
    user_id = message.from_user.id
    
    conn = sqlite3.connect('bot.db')
    cursor = conn.cursor()
    
    try:
        cursor.execute("SELECT * FROM promocodes WHERE code = ?", (promo_code,))
        promo = cursor.fetchone()
        
        if not promo:
            await message.answer("‚ùå –ü—Ä–æ–º–æ–∫–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        promo_id, code, gold, max_activations, activations_left, is_active = promo
        
        if not is_active:
            await message.answer("‚ùå –ü—Ä–æ–º–æ–∫–æ–¥ –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω")
            return
            
        if activations_left <= 0:
            await message.answer("‚ùå –õ–∏–º–∏—Ç –∞–∫—Ç–∏–≤–∞—Ü–∏–π –∏—Å—á–µ—Ä–ø–∞–Ω")
            return
            
        cursor.execute("SELECT * FROM activations WHERE user_id = ? AND promo_id = ?", (user_id, promo_id))
        if cursor.fetchone():
            await message.answer("‚ùå –í—ã —É–∂–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª–∏ —ç—Ç–æ—Ç –ø—Ä–æ–º–æ–∫–æ–¥")
            return
            
        cursor.execute(
            "UPDATE promocodes SET activations_left = activations_left - 1 WHERE id = ?",
            (promo_id,)
        )
        cursor.execute(
            "UPDATE users SET balance = balance + ? WHERE user_id = ?",
            (gold, user_id)
        )
        cursor.execute(
            "INSERT INTO activations (user_id, promo_id, activated_at) VALUES (?, ?, ?)",
            (user_id, promo_id, datetime.now())
        )
        
        conn.commit()
        
        # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å —Å–∞–π—Ç–æ–º
        await sync_with_website(user_id, "update_balance", {"balance": await get_user_balance(user_id)})
        
        await message.answer(
            f"üéâ –ü—Ä–æ–º–æ–∫–æ–¥ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω! +{gold} –≥–æ–ª–¥—ã\n"
            f"–í–∞—à –±–∞–ª–∞–Ω—Å: {await get_user_balance(user_id)} –≥–æ–ª–¥—ã",
            reply_markup=get_main_menu()
        )
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
    finally:
        conn.close()
        await state.finish()

# –í—ã–≤–æ–¥ –≥–æ–ª–¥—ã
@dp.message_handler(text="üí∏ –í—ã–≤–µ—Å—Ç–∏ –≥–æ–ª–¥—É")
async def withdraw_start(message: types.Message):
    """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –≤—ã–≤–æ–¥–∞"""
    user_id = message.from_user.id
    balance = await get_user_balance(user_id)
    
    if balance < MIN_WITHDRAW:
        await message.answer(
            f"‚ùå –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –≤—ã–≤–æ–¥–∞: {MIN_WITHDRAW} –≥–æ–ª–¥—ã\n"
            f"üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: {balance} –≥–æ–ª–¥—ã"
        )
        return
    
    await WithdrawState.AMOUNT.set()
    await message.answer(
        f"üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: {balance} –≥–æ–ª–¥—ã\n"
        f"–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –≤—ã–≤–æ–¥–∞ ({MIN_WITHDRAW}-{MAX_WITHDRAW}):",
        reply_markup=get_back_menu()
    )

@dp.message_handler(state=WithdrawState.AMOUNT)
async def process_withdraw_amount(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—É–º–º—ã –≤—ã–≤–æ–¥–∞"""
    if message.text == "‚óÄÔ∏è –ù–∞–∑–∞–¥":
        await state.finish()
        await message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=get_main_menu())
        return
    
    try:
        amount = int(message.text)
        if amount < MIN_WITHDRAW or amount > MAX_WITHDRAW:
            raise ValueError
    except ValueError:
        await message.answer(
            f"‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è —Å—É–º–º–∞. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç {MIN_WITHDRAW} –¥–æ {MAX_WITHDRAW}"
        )
        return
    
    user_id = message.from_user.id
    balance = await get_user_balance(user_id)
    
    if balance < amount:
        await message.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ")
        await state.finish()
        return
    
    await state.update_data(amount=amount)
    await WithdrawState.AVATAR.set()
    await message.answer("üì∏ –ü—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ –≤–∞—à–µ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è (–∞–≤–∞—Ç–∞—Ä):")

@dp.message_handler(content_types=['photo'], state=WithdrawState.AVATAR)
async def process_avatar(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–≤–∞—Ç–∞—Ä–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞"""
    photo_id = message.photo[-1].file_id
    await state.update_data(avatar_id=photo_id)
    await WithdrawState.SCREENSHOT.set()
    await message.answer("üìä –¢–µ–ø–µ—Ä—å –ø—Ä–∏—à–ª–∏—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç —Å —Ç–æ—Ä–≥–æ–≤–æ–π –ø–ª–æ—â–∞–¥–∫–∏:")

@dp.message_handler(content_types=['photo'], state=WithdrawState.SCREENSHOT)
async def process_screenshot(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞ –∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –≤—ã–≤–æ–¥–∞"""
    user_id = message.from_user.id
    username = message.from_user.username
    screenshot_id = message.photo[-1].file_id
    data = await state.get_data()
    amount = data['amount']
    
    conn = sqlite3.connect('bot.db')
    cursor = conn.cursor()
    
    try:
        cursor.execute(
            "INSERT INTO transactions (user_id, amount, status, avatar_id, screenshot_id, created_at) "
            "VALUES (?, ?, ?, ?, ?, ?)",
            (user_id, amount, 'pending', data['avatar_id'], screenshot_id, datetime.now())
        )
        trans_id = cursor.lastrowid
        
        cursor.execute(
            "UPDATE users SET balance = balance - ? WHERE user_id = ?",
            (amount, user_id)
        )
        
        conn.commit()
        
        # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å —Å–∞–π—Ç–æ–º
        await sync_with_website(user_id, "withdraw", {
            "transaction_id": trans_id,
            "amount": amount,
            "status": "pending",
            "created_at": datetime.now().isoformat()
        })
        
        await sync_with_website(user_id, "update_balance", {"balance": await get_user_balance(user_id)})
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–æ–≤
        for admin_id in ADMIN_IDS:
            try:
                admin_msg = (
                    f"üÜï –ù–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–≤–æ–¥ #ID{trans_id}\n\n"
                    f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{username} (ID: {user_id})\n"
                    f"üí∞ –°—É–º–º–∞: {amount} –≥–æ–ª–¥—ã\n"
                    f"üìÖ –î–∞—Ç–∞: {datetime.now().strftime('%d.%m.%Y %H:%M')}"
                )
                
                keyboard = types.InlineKeyboardMarkup()
                keyboard.row(
                    types.InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"confirm_{trans_id}"),
                    types.InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject_{trans_id}")
                )
                
                await bot.send_message(admin_id, admin_msg, reply_markup=keyboard)
                await bot.send_photo(admin_id, data['avatar_id'])
                await bot.send_photo(admin_id, screenshot_id)
            except Exception as e:
                logger.error(f"Error notifying admin {admin_id}: {e}")
                continue
        
        await message.answer(
            "‚úÖ –í–∞—à –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–≤–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.\n"
            "–û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è!",
            reply_markup=get_main_menu()
        )
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
    finally:
        conn.close()
        await state.finish()

# –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å
@dp.message_handler(commands=['admin'])
async def admin_panel(message: types.Message):
    """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏"""
    if message.from_user.id not in ADMIN_IDS:
        return
    
    await message.answer("üëÆ‚Äç‚ôÇÔ∏è –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", reply_markup=get_admin_menu())

@dp.message_handler(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
async def admin_stats(message: types.Message):
    """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è –∞–¥–º–∏–Ω–∞"""
    if message.from_user.id not in ADMIN_IDS:
        return
    
    conn = sqlite3.connect('bot.db')
    cursor = conn.cursor()
    
    cursor.execute("SELECT COUNT(*) FROM users")
    total_users = cursor.fetchone()[0]
    
    cursor.execute("SELECT COUNT(*) FROM users WHERE banned = TRUE")
    banned_users = cursor.fetchone()[0]
    
    cursor.execute("SELECT SUM(balance) FROM users")
    total_gold = cursor.fetchone()[0] or 0
    
    cursor.execute("SELECT COUNT(*) FROM referrals")
    total_refs = cursor.fetchone()[0]
    
    cursor.execute("SELECT COUNT(*) FROM transactions WHERE status = 'completed'")
    completed_withdrawals = cursor.fetchone()[0]
    
    cursor.execute("SELECT SUM(amount) FROM transactions WHERE status = 'completed'")
    total_withdrawn = cursor.fetchone()[0] or 0
    
    cursor.execute("SELECT COUNT(*) FROM transactions WHERE status = 'pending'")
    pending_withdrawals = cursor.fetchone()[0]
    
    conn.close()
    
    await message.answer(
        f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã:\n\n"
        f"üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}\n"
        f"üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ: {banned_users}\n"
        f"üí∞ –í—Å–µ–≥–æ –≥–æ–ª–¥—ã: {total_gold}\n"
        f"üë• –†–µ—Ñ–µ—Ä–∞–ª–æ–≤: {total_refs}\n\n"
        f"üí∏ –í—ã–≤–æ–¥–æ–≤:\n"
        f"‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ: {completed_withdrawals} (Œ£{total_withdrawn} –≥–æ–ª–¥—ã)\n"
        f"üïí –û–∂–∏–¥–∞–µ—Ç: {pending_withdrawals}",
        reply_markup=get_admin_menu()
    )

@dp.message_handler(text="üéÅ –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–º–æ")
async def add_promo_start(message: types.Message):
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø—Ä–æ–º–æ–∫–æ–¥–∞"""
    if message.from_user.id not in ADMIN_IDS:
        return
    
    await AdminState.ADD_PROMO.set()
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
        "<code>–ù–ê–ó–í–ê–ù–ò–ï –ö–û–õ–ò–ß–ï–°–¢–í–û_–ì–û–õ–î–´ –ö–û–õ–ò–ß–ï–°–¢–í–û_–ê–ö–¢–ò–í–ê–¶–ò–ô</code>\n\n"
        "–ü—Ä–∏–º–µ—Ä: <code>SUMMER2023 100 50</code>",
        reply_markup=get_back_menu(),
        parse_mode="HTML"
    )

@dp.message_handler(state=AdminState.ADD_PROMO)
async def process_add_promo(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–∞"""
    if message.text == "‚óÄÔ∏è –ù–∞–∑–∞–¥":
        await state.finish()
        await message.answer("–ê–¥–º–∏–Ω-–º–µ–Ω—é:", reply_markup=get_admin_menu())
        return
    
    try:
        parts = message.text.split()
        if len(parts) != 3:
            raise ValueError("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç")
        
        code = parts[0].upper()
        gold = int(parts[1])
        activations = int(parts[2])
        
        conn = None
        try:
            conn = sqlite3.connect('bot.db')
            cursor = conn.cursor()
            
            cursor.execute(
                "INSERT INTO promocodes (code, gold, max_activations, activations_left) VALUES (?, ?, ?, ?)",
                (code, gold, activations, activations)
            )
            
            conn.commit()
            await message.answer(
                f"‚úÖ –ü—Ä–æ–º–æ–∫–æ–¥ –¥–æ–±–∞–≤–ª–µ–Ω:\n"
                f"üîë –ö–æ–¥: {code}\n"
                f"üí∞ –ì–æ–ª–¥–∞: {gold}\n"
                f"üîÑ –ê–∫—Ç–∏–≤–∞—Ü–∏–π: {activations}",
                reply_markup=get_admin_menu()
            )
        except sqlite3.IntegrityError:
            await message.answer("‚ùå –¢–∞–∫–æ–π –ø—Ä–æ–º–æ–∫–æ–¥ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
        except Exception as e:
            await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {str(e)}")
        finally:
            if conn:
                conn.close()
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: –ù–ê–ó–í–ê–ù–ò–ï –ì–û–õ–î–ê –ê–ö–¢–ò–í–ê–¶–ò–ò")
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
    finally:
        await state.finish()

@dp.message_handler(text="üî® –ó–∞–±–∞–Ω–∏—Ç—å/–†–∞–∑–±–∞–Ω–∏—Ç—å")
async def ban_unban_menu(message: types.Message):
    """–ú–µ–Ω—é –±–∞–Ω–∞/—Ä–∞–∑–±–∞–Ω–∞"""
    if message.from_user.id not in ADMIN_IDS:
        return
    
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=get_ban_unban_menu())

@dp.message_handler(text="üî® –ó–∞–±–∞–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
async def ban_user_start(message: types.Message):
    """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –±–∞–Ω–∞"""
    if message.from_user.id not in ADMIN_IDS:
        return
    
    await AdminState.BAN_USER.set()
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏:",
        reply_markup=get_back_menu()
    )

@dp.message_handler(text="üîì –†–∞–∑–±–∞–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
async def unban_user_start(message: types.Message):
    """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ —Ä–∞–∑–±–∞–Ω–∞"""
    if message.from_user.id not in ADMIN_IDS:
        return
    
    await AdminState.UNBAN_USER.set()
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏:",
        reply_markup=get_back_menu()
    )

@dp.message_handler(state=AdminState.BAN_USER)
async def process_ban_user(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –±–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if message.text == "‚óÄÔ∏è –ù–∞–∑–∞–¥":
        await state.finish()
        await message.answer("–ê–¥–º–∏–Ω-–º–µ–Ω—é:", reply_markup=get_admin_menu())
        return
    
    try:
        user_id = int(message.text)
        
        conn = sqlite3.connect('bot.db')
        cursor = conn.cursor()
        
        cursor.execute("SELECT username FROM users WHERE user_id = ?", (user_id,))
        user = cursor.fetchone()
        
        if not user:
            await message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        cursor.execute(
            "UPDATE users SET banned = TRUE WHERE user_id = ?",
            (user_id,)
        )
        
        conn.commit()
        
        try:
            await bot.send_message(
                user_id,
                "üö´ –í—ã –±—ã–ª–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
            )
        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        
        await message.answer(
            f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{user[0]} (ID: {user_id}) –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω",
            reply_markup=get_admin_menu()
        )
    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
    finally:
        conn.close()
        await state.finish()

@dp.message_handler(state=AdminState.UNBAN_USER)
async def process_unban_user(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–∑–±–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if message.text == "‚óÄÔ∏è –ù–∞–∑–∞–¥":
        await state.finish()
        await message.answer("–ê–¥–º–∏–Ω-–º–µ–Ω—é:", reply_markup=get_admin_menu())
        return
    
    try:
        user_id = int(message.text)
        
        conn = sqlite3.connect('bot.db')
        cursor = conn.cursor()
        
        cursor.execute("SELECT username FROM users WHERE user_id = ?", (user_id,))
        user = cursor.fetchone()
        
        if not user:
            await message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        cursor.execute(
            "UPDATE users SET banned = FALSE WHERE user_id = ?",
            (user_id,)
        )
        
        conn.commit()
        
        try:
            await bot.send_message(
                user_id,
                "‚úÖ –í—ã –±—ã–ª–∏ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ. –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ —Å–Ω–æ–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º."
            )
        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        
        await message.answer(
            f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{user[0]} (ID: {user_id}) —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω",
            reply_markup=get_admin_menu()
        )
    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
    finally:
        conn.close()
        await state.finish()

@dp.message_handler(text="üì¢ –†–∞—Å—Å—ã–ª–∫–∞")
async def announce_start(message: types.Message):
    """–ù–∞—á–∞–ª–æ —Ä–∞—Å—Å—ã–ª–∫–∏"""
    if message.from_user.id not in ADMIN_IDS:
        return
    
    await AdminState.SEND_ANNOUNCE.set()
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:",
        reply_markup=get_back_menu()
    )

@dp.message_handler(state=AdminState.SEND_ANNOUNCE)
async def process_announce(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏"""
    if message.text == "‚óÄÔ∏è –ù–∞–∑–∞–¥":
        await state.finish()
        await message.answer("–ê–¥–º–∏–Ω-–º–µ–Ω—é:", reply_markup=get_admin_menu())
        return
    
    conn = None
    try:
        conn = sqlite3.connect('bot.db')
        cursor = conn.cursor()
        
        cursor.execute("SELECT user_id FROM users WHERE banned = FALSE")
        users = cursor.fetchall()
        
        success = 0
        fails = 0
        
        for user in users:
            try:
                await bot.send_message(user[0], message.text)
                success += 1
            except:
                fails += 1
        
        await message.answer(
            f"üì¢ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞:\n"
            f"‚úÖ –£—Å–ø–µ—à–Ω–æ: {success}\n"
            f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å: {fails}",
            reply_markup=get_admin_menu()
        )
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
    finally:
        if conn:
            conn.close()
        await state.finish()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–≤–æ–¥–æ–≤ –∞–¥–º–∏–Ω–æ–º
@dp.callback_query_handler(lambda c: c.data.startswith('confirm_'))
async def confirm_withdrawal(callback_query: types.CallbackQuery):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤—ã–≤–æ–¥–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"""
    if callback_query.from_user.id not in ADMIN_IDS:
        return
    
    trans_id = int(callback_query.data.split('_')[1])
    
    conn = sqlite3.connect('bot.db')
    cursor = conn.cursor()
    
    try:
        cursor.execute(
            "SELECT user_id, amount FROM transactions WHERE id = ? AND status = 'pending'",
            (trans_id,)
        )
        trans = cursor.fetchone()
        
        if not trans:
            await bot.answer_callback_query(
                callback_query.id,
                "–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –∏–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞",
                show_alert=True
            )
            return
        
        user_id, amount = trans
        
        cursor.execute(
            "UPDATE transactions SET status = 'completed', completed_at = ? WHERE id = ?",
            (datetime.now(), trans_id)
        )
        
        conn.commit()
        
        try:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            await bot.send_message(
                user_id,
                f"‚úÖ –í–∞—à –≤—ã–≤–æ–¥ #{trans_id} –Ω–∞ —Å—É–º–º—É {amount} –≥–æ–ª–¥—ã –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω!",
                reply_markup=get_feedback_keyboard(trans_id)
            )
            
        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
        
        await bot.edit_message_text(
            chat_id=callback_query.message.chat.id,
            message_id=callback_query.message.message_id,
            text=f"‚úÖ –í—ã–≤–æ–¥ #{trans_id} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω",
            reply_markup=None
        )
        
        await bot.answer_callback_query(callback_query.id)
    except Exception as e:
        await bot.answer_callback_query(
            callback_query.id,
            f"–û—à–∏–±–∫–∞: {str(e)}",
            show_alert=True
        )
    finally:
        conn.close()

@dp.callback_query_handler(lambda c: c.data.startswith('reject_'))
async def reject_withdrawal(callback_query: types.CallbackQuery):
    """–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –≤—ã–≤–æ–¥–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"""
    if callback_query.from_user.id not in ADMIN_IDS:
        return
    
    trans_id = int(callback_query.data.split('_')[1])
    
    conn = sqlite3.connect('bot.db')
    cursor = conn.cursor()
    
    try:
        cursor.execute(
            "SELECT user_id, amount FROM transactions WHERE id = ? AND status = 'pending'",
            (trans_id,)
        )
        trans = cursor.fetchone()
        
        if not trans:
            await bot.answer_callback_query(
                callback_query.id,
                "–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –∏–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞",
                show_alert=True
            )
            return
        
        user_id, amount = trans
        
        cursor.execute(
            "UPDATE users SET balance = balance + ? WHERE user_id = ?",
            (amount, user_id)
        )
        
        cursor.execute(
            "UPDATE transactions SET status = 'rejected' WHERE id = ?",
            (trans_id,)
        )
        
        conn.commit()
        
        # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å —Å–∞–π—Ç–æ–º
        await sync_with_website(user_id, "update_balance", {"balance": await get_user_balance(user_id)})
        
        try:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            await bot.send_message(
                user_id,
                f"‚ùå –í–∞—à –≤—ã–≤–æ–¥ #{trans_id} –Ω–∞ —Å—É–º–º—É {amount} –≥–æ–ª–¥—ã –æ—Ç–∫–ª–æ–Ω–µ–Ω.\n"
                f"–°—Ä–µ–¥—Å—Ç–≤–∞ –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã –Ω–∞ –±–∞–ª–∞–Ω—Å."
            )
        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
        
        await bot.edit_message_text(
            chat_id=callback_query.message.chat.id,
            message_id=callback_query.message.message_id,
            text=f"‚ùå –í—ã–≤–æ–¥ #{trans_id} –æ—Ç–∫–ª–æ–Ω–µ–Ω",
            reply_markup=None
        )
        
        await bot.answer_callback_query(callback_query.id)
    except Exception as e:
        await bot.answer_callback_query(
            callback_query.id,
            f"–û—à–∏–±–∫–∞: {str(e)}",
            show_alert=True
        )
    finally:
        conn.close()

# –°–∏—Å—Ç–µ–º–∞ –æ—Ç–∑—ã–≤–æ–≤
@dp.callback_query_handler(lambda c: c.data.startswith('leave_feedback_'))
async def start_feedback(callback_query: types.CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –æ—Ç–∑—ã–≤–∞"""
    trans_id = int(callback_query.data.split('_')[2])
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ—Å—Ç–∞–≤–ª—è–ª –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–∑—ã–≤ –Ω–∞ —ç—Ç–æ—Ç –≤—ã–≤–æ–¥
    conn = sqlite3.connect('bot.db')
    cursor = conn.cursor()
    try:
        cursor.execute("SELECT feedback_given FROM transactions WHERE id = ?", (trans_id,))
        result = cursor.fetchone()
        feedback_given = result[0] if result else True
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—Ç–∑—ã–≤–∞: {e}")
        feedback_given = True
    
    conn.close()
    
    if feedback_given:
        await bot.answer_callback_query(
            callback_query.id,
            "–í—ã —É–∂–µ –æ—Å—Ç–∞–≤–∏–ª–∏ –æ—Ç–∑—ã–≤ –Ω–∞ —ç—Ç–æ—Ç –≤—ã–≤–æ–¥",
            show_alert=True
        )
        return
    
    await FeedbackState.TEXT.set()
    await state.update_data(transaction_id=trans_id)
    await bot.send_message(
        callback_query.from_user.id,
        "üìù –ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –æ—Ç–∑—ã–≤ –æ —Ä–∞–±–æ—Ç–µ –±–æ—Ç–∞:",
        reply_markup=get_back_menu()
    )
    await bot.answer_callback_query(callback_query.id)

@dp.callback_query_handler(lambda c: c.data.startswith('no_feedback_'))
async def skip_feedback(callback_query: types.CallbackQuery):
    """–ü—Ä–æ–ø—É—Å–∫ –æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –æ—Ç–∑—ã–≤–∞"""
    await bot.send_message(
        callback_query.from_user.id,
        "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
        reply_markup=get_main_menu()
    )
    await bot.answer_callback_query(callback_query.id)

@dp.message_handler(state=FeedbackState.TEXT, content_types=['text', 'photo'])
async def process_feedback(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–∑—ã–≤–∞"""
    if message.text == "‚óÄÔ∏è –ù–∞–∑–∞–¥":
        await state.finish()
        await message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=get_main_menu())
        return
        
    user_id = message.from_user.id
    data = await state.get_data()
    transaction_id = data['transaction_id']
    text = message.text or message.caption
    photo_id = None
    
    if message.photo:
        photo_id = message.photo[-1].file_id
    
    conn = sqlite3.connect('bot.db')
    cursor = conn.cursor()
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ—Å—Ç–∞–≤–ª—è–ª –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–∑—ã–≤ –Ω–∞ —ç—Ç–æ—Ç –≤—ã–≤–æ–¥
        cursor.execute("SELECT feedback_given FROM transactions WHERE id = ?", (transaction_id,))
        result = cursor.fetchone()
        feedback_given = result[0] if result else True
        
        if feedback_given:
            await message.answer("‚ùå –í—ã —É–∂–µ –æ—Å—Ç–∞–≤–∏–ª–∏ –æ—Ç–∑—ã–≤ –Ω–∞ —ç—Ç–æ—Ç –≤—ã–≤–æ–¥", reply_markup=get_main_menu())
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–∑—ã–≤
        cursor.execute(
            "INSERT INTO feedbacks (user_id, transaction_id, text, photo_id, created_at) VALUES (?, ?, ?, ?, ?)",
            (user_id, transaction_id, text, photo_id, datetime.now())
        )
        
        # –ü–æ–º–µ—á–∞–µ–º –≤—ã–≤–æ–¥ –∫–∞–∫ –∏–º–µ—é—â–∏–π –æ—Ç–∑—ã–≤
        cursor.execute(
            "UPDATE transactions SET feedback_given = TRUE WHERE id = ?",
            (transaction_id,)
        )
        
        conn.commit()
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–æ–≤
        for admin_id in ADMIN_IDS:
            try:
                msg = f"üìù –ù–æ–≤—ã–π –æ—Ç–∑—ã–≤ –æ—Ç @{message.from_user.username} (ID: {user_id}) –Ω–∞ –≤—ã–≤–æ–¥ #{transaction_id}:\n\n{text}"
                if photo_id:
                    await bot.send_photo(admin_id, photo_id, caption=msg)
                else:
                    await bot.send_message(admin_id, msg)
            except Exception as e:
                logger.error(f"Error sending feedback to admin {admin_id}: {e}")
        
        await message.answer(
            "‚úÖ –°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –æ—Ç–∑—ã–≤!",
            reply_markup=get_main_menu()
        )
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –æ—Ç–∑—ã–≤–∞: {str(e)}")
    finally:
        conn.close()
        await state.finish()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –ø—Ä–æ–±—É–∂–¥–µ–Ω–∏—è —Å–µ—Ä–≤–µ—Ä–∞
@dp.message_handler()
async def wake_up_on_message(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –ø—Ä–æ–±—É–∂–¥–µ–Ω–∏—è —Å–µ—Ä–≤–µ—Ä–∞"""
    await wake_up_server()
    await message.answer("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏", reply_markup=get_main_menu())

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == '__main__':
    from aiogram import executor
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω! –î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞–∂–º–∏—Ç–µ Ctrl+C")
    executor.start_polling(dp, skip_updates=True)