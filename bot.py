import os
import logging
import sqlite3
from aiogram import Bot, Dispatcher, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from datetime import datetime
import aiohttp
import asyncio

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞
TOKEN = "8164381436:AAGfqtB4y9pjlg7rMzPAysMPsqixaUFVvZA"
ADMIN_IDS = [6790535634, 6303872304]
SITE_URL = "http://golld-stend.tilda.ws"
MIN_WITHDRAW = 250
MAX_WITHDRAW = 400
REFERRAL_BONUS = 4
TELEGRAM_CHANNEL = "https://t.me/promolllGoldfreelll"
API_URL = "https://your-site.onrender.com/api"  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à URL

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token=TOKEN)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏ –º–∏–≥—Ä–∞—Ü–∏—è –ë–î
def init_db():
    conn = sqlite3.connect('bot.db')
    cursor = conn.cursor()
    
    cursor.execute('''CREATE TABLE IF NOT EXISTS users
                     (user_id INTEGER PRIMARY KEY, 
                      username TEXT,
                      balance INTEGER DEFAULT 0,
                      referrals INTEGER DEFAULT 0,
                      banned BOOLEAN DEFAULT FALSE,
                      reg_date TIMESTAMP)''')
    
    cursor.execute('''CREATE TABLE IF NOT EXISTS promocodes
                     (id INTEGER PRIMARY KEY AUTOINCREMENT,
                      code TEXT UNIQUE,
                      gold INTEGER,
                      max_activations INTEGER,
                      activations_left INTEGER,
                      is_active BOOLEAN DEFAULT TRUE)''')
    
    cursor.execute('''CREATE TABLE IF NOT EXISTS activations
                     (id INTEGER PRIMARY KEY AUTOINCREMENT,
                      user_id INTEGER,
                      promo_id INTEGER,
                      activated_at TIMESTAMP)''')
    
    cursor.execute('''CREATE TABLE IF NOT EXISTS transactions
                     (id INTEGER PRIMARY KEY AUTOINCREMENT,
                      user_id INTEGER,
                      amount INTEGER,
                      status TEXT,
                      avatar_id TEXT,
                      screenshot_id TEXT,
                      created_at TIMESTAMP,
                      completed_at TIMESTAMP,
                      feedback_given BOOLEAN DEFAULT FALSE)''')
    
    cursor.execute('''CREATE TABLE IF NOT EXISTS feedbacks
                     (id INTEGER PRIMARY KEY AUTOINCREMENT,
                      user_id INTEGER,
                      transaction_id INTEGER,
                      text TEXT,
                      photo_id TEXT,
                      created_at TIMESTAMP)''')
    
    conn.commit()
    conn.close()

def migrate_db():
    conn = sqlite3.connect('bot.db')
    cursor = conn.cursor()
    
    try:
        cursor.execute("PRAGMA table_info(transactions)")
        columns = [column[1] for column in cursor.fetchall()]
        if 'feedback_given' not in columns:
            cursor.execute("ALTER TABLE transactions ADD COLUMN feedback_given BOOLEAN DEFAULT FALSE")
        
        cursor.execute("PRAGMA table_info(feedbacks)")
        columns = [column[1] for column in cursor.fetchall()]
        if 'transaction_id' not in columns:
            cursor.execute("ALTER TABLE feedbacks ADD COLUMN transaction_id INTEGER")
        
        conn.commit()
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏ –ë–î: {e}")
    finally:
        conn.close()

init_db()
migrate_db()

# –°–æ—Å—Ç–æ—è–Ω–∏—è FSM
class WithdrawState(StatesGroup):
    AMOUNT = State()
    AVATAR = State()
    SCREENSHOT = State()

class PromoCodeState(StatesGroup):
    ENTER_CODE = State()

class AdminState(StatesGroup):
    ADD_PROMO = State()
    BAN_USER = State()
    UNBAN_USER = State()
    SEND_ANNOUNCE = State()

class FeedbackState(StatesGroup):
    TEXT = State()

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
def get_main_menu():
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.row("üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å", "üí∏ –í—ã–≤–µ—Å—Ç–∏ –≥–æ–ª–¥—É")
    keyboard.row("üéÅ –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥", "üìä –ò—Å—Ç–æ—Ä–∏—è –≤—ã–≤–æ–¥–æ–≤")
    keyboard.row("üåê –ù–∞—à —Å–∞–π—Ç")
    return keyboard

def get_admin_menu():
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.row("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", "üì¢ –†–∞—Å—Å—ã–ª–∫–∞")
    keyboard.row("üî® –ó–∞–±–∞–Ω–∏—Ç—å/–†–∞–∑–±–∞–Ω–∏—Ç—å", "üéÅ –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–º–æ")
    keyboard.row("‚óÄÔ∏è –í –º–µ–Ω—é")
    return keyboard

def get_back_menu():
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.row("‚óÄÔ∏è –ù–∞–∑–∞–¥")
    return keyboard

def get_feedback_keyboard(transaction_id):
    conn = sqlite3.connect('bot.db')
    cursor = conn.cursor()
    feedback_given = True
    
    try:
        cursor.execute("SELECT feedback_given FROM transactions WHERE id = ?", (transaction_id,))
        result = cursor.fetchone()
        feedback_given = result[0] if result else True
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—Ç–∑—ã–≤–∞: {e}")
    
    conn.close()
    
    keyboard = types.InlineKeyboardMarkup()
    if not feedback_given:
        keyboard.row(
            types.InlineKeyboardButton("üìù –û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤", callback_data=f"leave_feedback_{transaction_id}"),
            types.InlineKeyboardButton("‚ùå –ù–µ —Å–µ–π—á–∞—Å", callback_data=f"no_feedback_{transaction_id}")
        )
    return keyboard

def get_ban_unban_menu():
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.row("üî® –ó–∞–±–∞–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
    keyboard.row("üîì –†–∞–∑–±–∞–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
    keyboard.row("‚óÄÔ∏è –ù–∞–∑–∞–¥")
    return keyboard

# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
def get_user_balance(user_id):
    conn = sqlite3.connect('bot.db')
    cursor = conn.cursor()
    cursor.execute("SELECT balance FROM users WHERE user_id = ?", (user_id,))
    result = cursor.fetchone()
    conn.close()
    return result[0] if result else 0

async def generate_referral_link(user_id):
    bot_username = (await bot.get_me()).username
    return f"https://t.me/{bot_username}?start=ref{user_id}"

async def wake_up_server():
    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(f"{API_URL.replace('/api', '')}/wakeup") as resp:
                logging.info(f"Server wakeup response: {resp.status}")
    except Exception as e:
        logging.error(f"Error waking up server: {e}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
@dp.message_handler(commands=['start'])
async def cmd_start(message: types.Message):
    await wake_up_server()  # –ü—Ä–æ–±—É–∂–¥–∞–µ–º —Å–µ—Ä–≤–µ—Ä –ø—Ä–∏ –∫–∞–∂–¥–æ–º —Å—Ç–∞—Ä—Ç–µ
    
    user_id = message.from_user.id
    username = message.from_user.username
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏
    ref_id = None
    if len(message.text) > 7 and 'ref' in message.text:
        try:
            ref_id = int(message.text.split('ref')[1])
        except (ValueError, IndexError):
            pass
    
    conn = sqlite3.connect('bot.db')
    cursor = conn.cursor()
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–Ω–∞
    cursor.execute("SELECT banned FROM users WHERE user_id = ?", (user_id,))
    user = cursor.fetchone()
    
    if user and user[0]:
        await message.answer("üö´ –í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ")
        conn.close()
        return
    
    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if not user:
        cursor.execute(
            "INSERT INTO users (user_id, username, balance, reg_date) VALUES (?, ?, ?, ?)",
            (user_id, username, 0, datetime.now())
        )
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–∞
        if ref_id and ref_id != user_id:
            try:
                cursor.execute("SELECT 1 FROM users WHERE user_id = ?", (ref_id,))
                if cursor.fetchone():
                    cursor.execute("SELECT 1 FROM referrals WHERE referral_id = ?", (user_id,))
                    if not cursor.fetchone():
                        cursor.execute(
                            "INSERT INTO referrals (referrer_id, referral_id, created_at) VALUES (?, ?, ?)",
                            (ref_id, user_id, datetime.now())
                        )
                        cursor.execute(
                            "UPDATE users SET referrals = referrals + 1, balance = balance + ? WHERE user_id = ?",
                            (REFERRAL_BONUS, ref_id)
                        )
                        cursor.execute(
                            "UPDATE users SET balance = balance + ? WHERE user_id = ?",
                            (REFERRAL_BONUS, user_id)
                        )
                        
                        try:
                            await bot.send_message(
                                ref_id,
                                f"üéâ –ù–æ–≤—ã–π —Ä–µ—Ñ–µ—Ä–∞–ª! @{username} –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –ø–æ –≤–∞—à–µ–π —Å—Å—ã–ª–∫–µ!\n"
                                f"–í–∞—à –±–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ {REFERRAL_BONUS} –≥–æ–ª–¥—ã"
                            )
                        except:
                            pass
                        
                        try:
                            await bot.send_message(
                                user_id,
                                f"üéâ –í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ!\n"
                                f"–í–∞—à –±–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ {REFERRAL_BONUS} –≥–æ–ª–¥—ã"
                            )
                        except:
                            pass
            except sqlite3.IntegrityError:
                pass
    
    conn.commit()
    conn.close()
    
    await message.answer(
        f"üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, @{username}!\n\n"
        f"üíé –í–∞—à –±–∞–ª–∞–Ω—Å: {get_user_balance(user_id)} –≥–æ–ª–¥—ã\n"
        f"üîó –ù–µ –∑–Ω–∞–µ—à—å –≥–¥–µ –Ω–∞–π—Ç–∏ –ø—Ä–æ–º–æ–∫–æ–¥ –¥–ª—è —Ñ–∞—Ä–º–∞ –≥–æ–ª–¥—ã? –ü–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ —Ç–µ–ª–µ–≥—Ä–∞–º –∫–∞–Ω–∞–ª: {TELEGRAM_CHANNEL}\n\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:",
        reply_markup=get_main_menu()
    )
    await message.answer(
        f"üåê –î–ª—è –≤—Ö–æ–¥–∞ –≤ –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç –Ω–∞ —Å–∞–π—Ç–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≤–∞—à Telegram ID:\n"
        f"<code>{user_id}</code>\n\n"
        f"–°–∞–π—Ç: {SITE_URL}",
        parse_mode="HTML"
    )

# ... (–≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∏–∑ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Å–∫—Ä–∏–ø—Ç–∞ –æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)

# –ù–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø—Ä–æ–±—É–∂–¥–µ–Ω–∏—è —Å–µ—Ä–≤–µ—Ä–∞
@dp.message_handler(commands=['wakeup'])
async def cmd_wakeup(message: types.Message):
    if message.from_user.id not in ADMIN_IDS:
        return
    
    await wake_up_server()
    await message.answer("–°–µ—Ä–≤–µ—Ä –ø—Ä–æ–±—É–∂–¥–µ–Ω")

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def on_startup(dp):
    await wake_up_server()
    asyncio.create_task(periodic_wakeup())

async def periodic_wakeup():
    while True:
        await asyncio.sleep(300)  # –ö–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
        await wake_up_server()

if __name__ == '__main__':
    logging.basicConfig(level=logging.INFO)
    from aiogram import executor
    executor.start_polling(dp, skip_updates=True, on_startup=on_startup)